# -*- coding: utf-8 -*-
"""GenAIModelador.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sT8FxJ5Q2HOnZ5WAq1iuiMaf882KXfWK
"""

pip install SPARQLWrapper

!pip install gradio

import openai

# Configurar a chave da API
openai.api_key = "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"

def gerar_fluxograma(descricao):
  """
  Gera um fluxograma a partir de uma descrição textual.

  Args:
    descricao: A descrição textual do processo.

  Returns:
    Uma string contendo o fluxograma em formato Mermaid.
  """

  response = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "Você é um assistente que gera fluxogramas em formato Mermaid a partir de descrições textuais."},
        {"role": "user", "content": f"Crie um fluxograma para o seguinte processo: {descricao}"},
    ]
  )

  return response.choices[0].message.content

# Exemplo de uso
descricao_processo = "O usuário faz login no sistema. Se o login for bem-sucedido, ele acessa a página inicial. Caso contrário, ele recebe uma mensagem de erro."
fluxograma = gerar_fluxograma(descricao_processo)
print(fluxograma)

# Exemplo de uso
#descricao_processo = "O usuário faz login no sistema. Se o login for bem-sucedido, ele acessa a página inicial. Caso contrário, ele recebe uma mensagem de erro."
descricao_processo = "O usuário faz login no SAP. Se login bem sucedido, ele entra com um código  de transação 'WD40'. Dentro da transação ele extrai o relatório e envia por email para área responsavel"
fluxograma = gerar_fluxograma(descricao_processo)
print(fluxograma)

import gradio as gr

iface = gr.Interface(
    fn=gerar_fluxograma,
    inputs=gr.Textbox(lines=5, placeholder="Digite a descrição do processo aqui..."),
    outputs="text",
    title="Gerador de Fluxogramas com IA",
    description="Crie fluxogramas a partir de descrições textuais.",
)

iface.launch()

"""consultar uma base publica para alimentar o RAG"""

from SPARQLWrapper import SPARQLWrapper, JSON

sparql = SPARQLWrapper("https://query.wikidata.org/sparql")

sparql.setQuery("""
SELECT ?item ?itemLabel
WHERE
{
  ?item wdt:P31 wd:Q11000.  # Seleciona itens que são instâncias de 'fluxograma'
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
}
""")
sparql.setReturnFormat(JSON)
results = sparql.query().convert()

for result in results["results"]["bindings"]:
    print(result["item"]["value"], result["itemLabel"]["value"])

